"""Streamlit evaluation dashboard for JANUS.

This module defines a simple dashboard for exploring evaluation metrics
produced by the JANUS evaluation scripts.  It reads precomputed metrics
from JSON or CSV files and renders interactive charts to inspect stale
hallucination rates, citation precision, retrieval vs parametric gating
errors and other slices.

The dashboard is intentionally lightweight; heavy processing should be
performed offline in `evals/` scripts.  The UI here helps visualise
results for manual inspection.
"""
from __future__ import annotations

import json
from pathlib import Path
from typing import Dict, Any

import pandas as pd


def load_metrics(path: Path) -> Dict[str, Any]:
    """Load evaluation metrics from a JSON or CSV file.

    Parameters
    ----------
    path: Path
        The path to a metrics file.  If the extension is `.json` a dict
        is returned; if `.csv` a dataframe is returned.

    Returns
    -------
    Dict[str, Any]
        The parsed metrics.
    """
    if path.suffix == ".json":
        with path.open("r", encoding="utf-8") as f:
            return json.load(f)
    elif path.suffix == ".csv":
        df = pd.read_csv(path)
        return {"dataframe": df}
    else:
        raise ValueError(f"Unsupported metrics file format: {path}")


def run_app() -> None:
    """Run the Streamlit evaluation dashboard."""
    import streamlit as st  # type: ignore

    st.title("JANUS Evaluation Dashboard")
    st.markdown(
        """
        Explore evaluation metrics generated by JANUS.  Upload a metrics file
        (JSON or CSV) generated from the scripts in `evals/` to see visualisations.
        """
    )

    uploaded_file = st.file_uploader("Upload metrics JSON/CSV", type=["json", "csv"])
    if uploaded_file is not None:
        tmp_path = Path("/tmp/metrics_uploaded")
        tmp_path.write_bytes(uploaded_file.getvalue())
        metrics = load_metrics(tmp_path)

        if "dataframe" in metrics:
            df: pd.DataFrame = metrics["dataframe"]
            st.dataframe(df)
        else:
            # Display simple keyâ€‘value metrics
            for key, value in metrics.items():
                st.write(f"**{key}**: {value}")


if __name__ == "__main__":
    run_app()